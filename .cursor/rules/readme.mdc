---
globs: README.md,README-CN.md
---

# README Documentation Guidelines

This rule provides guidance for creating and maintaining comprehensive README documentation for the Hera project.

## üìë README Structure Template

### Hera Modern README Layout
```markdown
<div align="center">

<img src="https://img.shields.io/badge/-Hera-000000?style=for-the-badge&labelColor=faf9f6&color=faf9f6&logoColor=000000" alt="Hera" width="280"/>

<h4>Modern Full-Stack Development Template</h4>

**English** | [ÁÆÄ‰Ωì‰∏≠Êñá](README-CN.md)

<picture>
  <source media="(prefers-color-scheme: dark)" srcset="media/dark_license.svg" />
  <img alt="License MIT" src="media/light_license.svg" />
</picture>

</div>

Named after Hera, the Queen of Olympian Gods in Greek mythology, this template serves as the foundation for creating exceptional modern applications with production-ready architecture.

## Table of Contents
- [Table of Contents](#table-of-contents)
- [Why Hera?](#why-hera)
- [Quick Start](#quick-start)
- [Deployment](#deployment)
- [Contributing](#contributing)
- [License](#license)

## Why Hera?
## Quick Start
## Deployment
## Contributing
## License
```

## üóÇÔ∏è Catalog (Table of Contents)

### Essential Sections
- **Why Hera**: Highlight key capabilities, benefits, and value proposition
- **Quick Start**: Get users running in < 5 minutes
- **Deployment**: Production deployment guides
- **Contributing**: Guidelines for contributors
- **License**: Project licensing information

### Hera-Specific Sections
```markdown
## Table of Contents
- [Table of Contents](#table-of-contents)
- [Why Hera?](#why-hera)
- [Quick Start](#quick-start)
- [Deployment](#deployment)
- [Contributing](#contributing)
- [License](#license)
```

### Setup Script Emphasis
**CRITICAL**: Always prominently feature the `setup.sh` script in Hera documentation:
- Position it as the **primary installation method**
- Explain its 4-step configuration process
- Provide manual alternatives as secondary options
- Reference it in deployment sections as well

### Setup Script Documentation Template
```markdown
## Interactive Setup with setup.sh

Hera includes a powerful interactive setup script that automates the entire configuration process:

\`\`\`bash
# Run the setup script
chmod +x setup.sh
./setup.sh
\`\`\`

The setup script guides you through **4 essential steps**:

### Step 1: Project Configuration
- Customize project name and branding
- Configure project-specific settings
- Set up directory structure

### Step 2: Port Configuration  
- **Frontend Port**: Default 3000 (customizable)
- **Backend Port**: Default 8000 (customizable)
- Automatic port conflict detection
- Updates all configuration files

### Step 3: Dependencies Installation
- **Frontend**: Automatic `npm install`
- **Backend**: Automatic `pip install -r requirements.txt`
- Dependency verification and troubleshooting

### Step 4: Environment Configuration
- Environment file creation
- Configuration summary display
- Ready-to-run status confirmation

### Benefits of Using setup.sh
- ‚úÖ **Zero Manual Configuration**: Fully automated setup
- ‚úÖ **Error Prevention**: Validates configurations before proceeding
- ‚úÖ **Time Saving**: Complete setup in under 2 minutes
- ‚úÖ **Beginner Friendly**: Interactive prompts guide users
- ‚úÖ **Consistent Environment**: Ensures proper configuration across systems
```

## Why Hera Section

### Why Hera Documentation Pattern
```markdown
## Why Hera?

Hera is a revolutionary full-stack development template that empowers developers to create modern applications with unprecedented speed and reliability. Like its namesake, the powerful Queen of Olympian Gods, Hera provides the foundation and nurturing environment for your projects to flourish.

### Core Features

#### Modern Full-Stack Architecture
- **Time to Market**: Reduce development time by up to 70% with pre-configured setup
- **Best Practices**: Follow industry standards and proven architectural patterns
- **Flexibility**: Easily customizable to fit your specific requirements

#### Developer Experience
- **Community**: Built on popular, well-supported technologies
- **Documentation**: Comprehensive guides and examples
- **Interactive Setup**: Guided configuration through setup.sh script

#### Production Ready
- **Docker Support**: Containerized deployment ready
- **Modern Stack**: Next.js frontend with FastAPI backend
- **Development Tools**: Integrated development environment

### Why Choose Hera?

- **Zero Configuration**: Get started immediately with interactive setup
- **Best Practices**: Industry-standard architecture and patterns
- **Fast Development**: Pre-configured tools and workflows
- **Production Ready**: Docker deployment and modern stack
```

### Why Hera Writing Guidelines
- **Value proposition first**: Start with what Hera enables users to achieve
- **Problem-solution approach**: Highlight pain points and how Hera solves them
- **Use action-oriented headlines**: Focus on what users can DO
- **Include concrete benefits**: Why each feature matters in practice
- **Be specific**: Avoid vague marketing language, provide tangible outcomes
- **Group logically**: Related features and benefits together
- **Clean design**: Professional appearance without emojis
- **Show differentiation**: What makes Hera unique compared to alternatives

## Quick Start Section

### Hera Quick Start Template
```markdown
## Quick Start

### Prerequisites
- Node.js 18+ and npm
- Python 3.11+
- Docker (optional, for containerized deployment)

### Automated Setup with setup.sh (Recommended)

The easiest way to get Hera running is using our interactive setup script:

\`\`\`bash
# 1. Clone the repository
git clone https://github.com/AutoAgents-Algorithm-Group/Hera.git
cd Hera

# 2. Make setup script executable and run it
chmod +x setup.sh
./setup.sh

# 3. Start development
make dev
\`\`\`

The setup script will guide you through:
- ‚úÖ **Project Configuration**: Customize project name and settings
- ‚úÖ **Port Configuration**: Set frontend (default: 3000) and backend (default: 8000) ports
- ‚úÖ **Dependencies Installation**: Automatically install frontend and backend dependencies
- ‚úÖ **Environment Setup**: Create necessary configuration files

### Alternative Quick Start (Manual)
\`\`\`bash
# Manual setup if you prefer not to use setup.sh
git clone https://github.com/AutoAgents-Algorithm-Group/Hera.git
cd Hera

# Install dependencies
cd frontend && npm install && cd ..
cd backend && pip install -r requirements.txt && cd ..

# Start services
make dev
\`\`\`

**Note**: If you later want to use setup.sh, remember to make it executable first:
\`\`\`bash
chmod +x setup.sh
./setup.sh
\`\`\`
```

### Quick Start Best Practices
- **setup.sh First**: Always recommend the interactive setup script as the primary method
- **chmod Required**: Always include `chmod +x setup.sh` before running the script
- **Time-boxed**: User should be running in < 5 minutes
- **Copy-paste ready**: All commands should work exactly as written
- **Prerequisites clear**: What users need before starting
- **Alternative methods**: Provide manual setup for users who prefer it
- **Verification steps**: How to know it's working
- **Next steps**: Where to go after quick start

## Deployment Section

### Hera Deployment Template
```markdown
## Deployment

### Docker Deployment (Recommended)
\`\`\`bash
cd Hera
docker compose -f docker/docker-compose.yml up -d
\`\`\`

### Troubleshooting
\`\`\`bash
# View application logs
docker compose -f docker/docker-compose.yml logs -f app

# Stop and remove old containers
docker stop hera && docker rm hera
docker rmi hera-app
\`\`\`

### Service Management
\`\`\`bash
# Check running status
docker compose -f docker/docker-compose.yml ps

# View real-time logs
docker compose -f docker/docker-compose.yml logs -f

# Restart services
docker compose -f docker/docker-compose.yml restart
\`\`\`
```

### Deployment Documentation Guidelines
- **Docker-focused**: Primarily Docker Compose deployment workflow
- **Service management**: Complete container lifecycle management
- **Troubleshooting**: Common deployment issues and solutions

## Content Writing Best Practices

### 1. Structure
- **Logical flow**: Introduction ‚Üí Why Hera ‚Üí Quick Start ‚Üí Deployment ‚Üí Contributing ‚Üí License
- **Scannable**: Use headers, lists, and code blocks
- **Progressive disclosure**: Basic first, advanced details later

### 2. Code Examples
- **Working examples**: All code should be copy-paste ready
- **Syntax highlighting**: Use proper language tags
- **Context**: Explain what each example does
- **Multiple formats**: CLI commands, API calls, config files

### 3. Visual Elements
- **Clean headers**: Professional section headers without emojis
- **Badges**: License badge only, using local SVG files from media/
- **Screenshots**: Key UI elements and workflows
- **Diagrams**: Architecture and flow diagrams

### 4. User-Focused Writing
- **Benefits first**: What users can achieve
- **Clear language**: Avoid jargon when possible
- **Action-oriented**: Tell users what to DO
- **Troubleshooting**: Common issues and solutions

## Header Design Guidelines

### Hera Logo Badge
Use the specific Hera logo badge with clean color scheme:
```markdown
<img src="https://img.shields.io/badge/-Hera-000000?style=for-the-badge&labelColor=faf9f6&color=faf9f6&logoColor=000000" alt="Hera" width="280"/>
```

**Color Specifications:**
- **Background Color**: `#faf9f6` (light cream)
- **Text Color**: `#000000` (black)
- **Style**: `for-the-badge` for professional appearance
- **Width**: `280px` for optimal display

### License Badge
Use local SVG files for better performance and consistency:
```markdown
<picture>
  <source media="(prefers-color-scheme: dark)" srcset="media/dark_license.svg" />
  <img alt="License MIT" src="media/light_license.svg" />
</picture>
```

**Badge Guidelines:**
- **Local files only**: Reference `media/` directory SVG files
- **No external badges**: Avoid dynamic GitHub/shields.io badges except for logo
- **Responsive design**: Support both light and dark themes
- **Minimal approach**: Only include essential information (License)

### Language Switching
```markdown
**English** | [ÁÆÄ‰Ωì‰∏≠Êñá](README-CN.md)  // For English README
[English](README.md) | **ÁÆÄ‰Ωì‰∏≠Êñá**              // For Chinese README
```

## Cross-References

When writing README content, reference other project files:
- **Setup Script**: [setup.sh](mdc:setup.sh) - **PRIMARY** interactive project configuration script
- **Build System**: [Makefile](mdc:Makefile) - Development and deployment commands
- **Docker**: [docker/docker-compose.yml](mdc:docker/docker-compose.yml) - Container orchestration
- **Backend API**: [backend/API/main.py](mdc:backend/API/main.py) - Main API entry point
- **Frontend**: [frontend/app/layout.tsx](mdc:frontend/app/layout.tsx) - UI layout
- **Dependencies**: [backend/requirements.txt](mdc:backend/requirements.txt) and [frontend/package.json](mdc:frontend/package.json)
- **License Assets**: [media/light_license.svg](mdc:media/light_license.svg) and [media/dark_license.svg](mdc:media/dark_license.svg) - Theme-aware license badges

### README File Organization
Hera project maintains bilingual documentation:
1. **README.md**: English version (primary document)
2. **README-CN.md**: Chinese version (ÂÆåÊï¥‰∏≠ÊñáÊñáÊ°£)
3. **Language switching**: Clear navigation between versions
4. **Consistent format**: Both versions use identical structure and styling

### Key Documentation Requirements
1. **No emojis**: Professional, clean appearance
2. **Centered layout**: Use `<div align="center">` for header section
3. **Local assets**: Reference `media/` directory for badges and images
4. **Minimal badges**: Only License badge required
5. **Responsive design**: Support light/dark themes
6. **Bilingual support**: English and Chinese versions with proper cross-links

### Setup Script Usage Priority
Always prioritize [setup.sh](mdc:setup.sh) in documentation:
1. **Development setup**: `./setup.sh` for local development
2. **Production deployment**: Docker deployment with docker-compose
3. **Manual alternative**: Step-by-step instructions for advanced users